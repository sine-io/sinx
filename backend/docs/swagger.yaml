basePath: /
definitions:
  dto.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: john@example.com
        maxLength: 100
        type: string
      password:
        example: password123
        maxLength: 50
        minLength: 6
        type: string
      username:
        example: john_doe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.UserResponse:
    properties:
      email:
        example: john@example.com
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      username:
        example: john_doe
        type: string
    type: object
  errorx.ErrorCode:
    enum:
    - 0
    - 10001
    - 10002
    - 10003
    - 10004
    - 10005
    - 20001
    - 20002
    - 20003
    - 20004
    - 20005
    type: integer
    x-enum-varnames:
    - ErrSuccess
    - ErrInternalServer
    - ErrInvalidParam
    - ErrUnauthorized
    - ErrForbidden
    - ErrNotFound
    - ErrUserNotFound
    - ErrUserAlreadyExists
    - ErrUserInvalidPassword
    - ErrUserInvalidToken
    - ErrUserTokenExpired
  response.Response:
    properties:
      code:
        $ref: '#/definitions/errorx.ErrorCode'
      data: {}
      message:
        type: string
    type: object
info:
  contact:
    name: Sineio
  description: 基于 Gin 的用户认证与授权服务接口文档。
  title: Sinx 用户认证系统 API
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: 用户登录获取令牌
      parameters:
      - description: 登录信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: 用户登录
      tags:
      - 用户管理
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: 创建新用户账户
      parameters:
      - description: 注册信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: 用户注册
      tags:
      - 用户管理
  /api/user/profile:
    get:
      consumes:
      - application/json
      description: 获取当前登录用户的资料信息
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取用户资料
      tags:
      - 用户管理
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    description: '使用格式: Bearer <token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
